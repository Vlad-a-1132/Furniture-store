generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  name            String?
  email           String     @unique
  password        String
  image           String?
  role            String     @default("user")
  resetToken      String?
  resetTokenExpiry DateTime?
  cart            CartItem[]
  favorites       Favorite[]
  reviews         Review[]
  orders          Order[]
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  @@map("users")
}

model Product {
  id              String         @id @default(cuid())
  name            String
  slug            String         @unique
  description     String
  seoTitle        String?
  seoDescription  String?
  keywords        String[]
  specifications  Json
  price           Float
  images          String[]
  defaultImage    String        @default("")
  categoryId      String?
  subcategoryId   String?
  thirdLevelId    String?
  inStock         Boolean       @default(true)
  discount        Float?
  material        String        @default("textile")
  rating          Float         @default(0)
  reviewsCount    Int          @default(0)
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  deletedAt       DateTime?
  category        Category?     @relation("CategoryProducts", fields: [categoryId], references: [id])
  subcategory     Category?     @relation("SubcategoryProducts", fields: [subcategoryId], references: [id])
  thirdLevel      Category?     @relation("ThirdLevelProducts", fields: [thirdLevelId], references: [id])
  cartItems       CartItem[]
  favorites       Favorite[]
  adminCart       AdminCart[]
  adminFavorites  AdminFavorite[]
  reviews         Review[]
  colorVariants   ColorVariant[]
  orderItems      OrderItem[]

  @@map("products")
}

model CartItem {
  id            String       @id @default(cuid())
  userId        String
  productId     String
  colorVariantId String?
  quantity      Int         @default(1)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  colorVariant  ColorVariant? @relation(fields: [colorVariantId], references: [id], onDelete: SetNull)

  @@unique([userId, productId, colorVariantId])
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  productId String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

// AdminCart model for storing admin's temporary cart items
model AdminCart {
  id        String   @id @default(cuid())
  productId String
  quantity  Int      @default(1)
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@map("admin_cart")
}

// AdminFavorite model for storing admin's temporary favorites
model AdminFavorite {
  id        String   @id @default(cuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())

  @@unique([productId])
  @@map("admin_favorites")
}

// Новая модель для вариантов цвета
model ColorVariant {
  id        String     @id @default(cuid())
  name      String
  hex       String
  image     String?
  productId String
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([productId, hex])
}

model Category {
  id                String    @id @default(cuid())
  name              String
  href              String    @unique
  parentId          String?
  parent            Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children          Category[] @relation("CategoryHierarchy")
  products          Product[] @relation("CategoryProducts")
  subcategoryProducts Product[] @relation("SubcategoryProducts")
  thirdLevelProducts Product[] @relation("ThirdLevelProducts")
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  @@map("categories")
}

model Promocode {
  id          String    @id @default(cuid())
  code        String    @unique
  discount    Float
  isActive    Boolean   @default(true)
  usageLimit  Int?
  usageCount  Int       @default(0)
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Review {
  id          String   @id @default(cuid())
  rating      Int
  comment     String
  images      String[]
  isApproved  Boolean  @default(false)
  productId   String
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  status      String      @default("pending")
  total       Float
  address     String
  phone       String
  promocode   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  product     Product  @relation(fields: [productId], references: [id])
  quantity    Int
  price       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("order_items")
}

model Promotion {
  id          String    @id @default(cuid())
  title       String
  description String
  image       String
  discount    Float
  isActive    Boolean   @default(true)
  expiresAt   DateTime?
  code        String?   @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("promotions")
} 